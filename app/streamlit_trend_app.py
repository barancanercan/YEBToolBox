import streamlit as st
import pandas as pd
from .trend_analyzer import TrendAnalyzer
import io
import plotly.express as px

def run_trends_app():
    # st.set_page_config(
    #     page_title="Google Trends Analizi UygulamasÄ±",
    #     page_icon="ğŸ“ˆ",
    #     layout="wide", # Daha geniÅŸ bir gÃ¶rÃ¼nÃ¼m iÃ§in layout 'wide' olarak ayarlandÄ±
    #     initial_sidebar_state="expanded"
    # )

    st.title("ğŸ“ˆ Google Trends Veri Analizi")
    st.markdown("Bu uygulama, yÃ¼klediÄŸiniz Google Trends verilerini analiz ederek anahtar kelimelerin gÃ¼nlÃ¼k ve genel arama eÄŸilimlerini, zirve noktalarÄ±nÄ± ve ortalama arama hacimlerini interaktif grafiklerle gÃ¶rselleÅŸtirir.")

    st.header("Veri YÃ¼kleme")
    uploaded_file = st.file_uploader("Analiz etmek istediÄŸiniz Google Trends verilerini iÃ§eren bir CSV dosyasÄ± yÃ¼kleyin.", type=["csv"])

    df = None
    if uploaded_file is not None:
        try:
            df = pd.read_csv(uploaded_file, skiprows=2)
            st.success("CSV dosyasÄ± baÅŸarÄ±yla yÃ¼klendi!")
            with st.expander("YÃ¼klenen Verinin Ä°lk 5 SatÄ±rÄ±nÄ± GÃ¶rÃ¼ntÃ¼le"):
                st.dataframe(df.head())

        except Exception as e:
            st.error(f"Dosya yÃ¼klenirken bir hata oluÅŸtu: {e}")
            st.info("LÃ¼tfen dosyanÄ±n doÄŸru CSV formatÄ±nda olduÄŸundan ve 'Zaman' sÃ¼tununun bulunduÄŸundan emin olun.")
    elif st.button("Ã–rnek Veri 'ornekdata.csv' Kullan"):
        try:
            df = pd.read_csv("ornekdata.csv", skiprows=2)
            st.success("Ã–rnek veri 'ornekdata.csv' baÅŸarÄ±yla yÃ¼klendi!")
            with st.expander("Ã–rnek Verinin Ä°lk 5 SatÄ±rÄ±nÄ± GÃ¶rÃ¼ntÃ¼le"):
                st.dataframe(df.head())
        except FileNotFoundError:
            st.error("`ornekdata.csv` dosyasÄ± bulunamadÄ±. LÃ¼tfen projenin kÃ¶k dizininde olduÄŸundan emin olun.")
        except Exception as e:
            st.error(f"Ã–rnek veri yÃ¼klenirken bir hata oluÅŸtu: {e}")

    if df is not None and not df.empty:
        # 'Zaman' sÃ¼tununu datetime objesine dÃ¶nÃ¼ÅŸtÃ¼r, analiz ve filtreleme iÃ§in gerekli
        df['Zaman'] = pd.to_datetime(df['Zaman'], format='%Y-%m-%dT%H')

        st.markdown("---")
        st.header("2. Zaman AralÄ±ÄŸÄ± SeÃ§imi ve Analiz")

        # Zaman aralÄ±ÄŸÄ± seÃ§imi iÃ§in min/max deÄŸerleri
        min_datetime_data = df['Zaman'].min()
        max_datetime_data = df['Zaman'].max()

        col1, col2 = st.columns(2)

        with col1:
            # BaÅŸlangÄ±Ã§ tarihi varsayÄ±lan olarak verinin en eski tarihi
            start_date_input = st.date_input("BaÅŸlangÄ±Ã§ Tarihi", min_datetime_data.date())
            # BaÅŸlangÄ±Ã§ saati varsayÄ±lan olarak verinin en eski saati
            start_time_input = st.time_input("BaÅŸlangÄ±Ã§ Saati", min_datetime_data.time())

        with col2:
            # BitiÅŸ tarihi varsayÄ±lan olarak verinin en yeni tarihi
            end_date_input = st.date_input("BitiÅŸ Tarihi", max_datetime_data.date())
            # BitiÅŸ saati varsayÄ±lan olarak verinin en yeni saati
            end_time_input = st.time_input("BitiÅŸ Saati", max_datetime_data.time())

        # Tarih ve saat girdilerini birleÅŸtir
        from datetime import datetime, time
        start_datetime_filter = datetime.combine(start_date_input, start_time_input)
        end_datetime_filter = datetime.combine(end_date_input, end_time_input)

        # SeÃ§ilen zaman aralÄ±ÄŸÄ±na gÃ¶re DataFrame'i filtrele
        filtered_df = df[(df['Zaman'] >= start_datetime_filter) & (df['Zaman'] <= end_datetime_filter)]

        # 'Tarih' ve 'Saat' sÃ¼tunlarÄ±nÄ± burada oluÅŸtur
        filtered_df['Tarih'] = filtered_df['Zaman'].dt.date
        filtered_df['Saat'] = filtered_df['Zaman'].dt.hour

        if filtered_df.empty:
            st.warning("SeÃ§ilen tarih aralÄ±ÄŸÄ±nda veri bulunamadÄ±. LÃ¼tfen farklÄ± bir aralÄ±k seÃ§in.")
        else:
            search_columns = [col for col in filtered_df.columns if col not in ['Zaman', 'Tarih', 'Saat']]
            if search_columns:
                filtered_df['Toplam Aranma'] = filtered_df[search_columns].sum(axis=1)
            
            analyzer = TrendAnalyzer(filtered_df)

            st.subheader("Analiz SonuÃ§larÄ±")
            
            st.write("AÅŸaÄŸÄ±da seÃ§ilen zaman aralÄ±ÄŸÄ±na gÃ¶re anahtar kelimelerin ortalama aranma sayÄ±larÄ± ve gÃ¼nlÃ¼k en yÃ¼ksek zirve noktalarÄ± bulunmaktadÄ±r.")

            st.markdown("**Ortalama Aranma SayÄ±larÄ±**")
            avg_counts = analyzer.get_average_search_counts()
            if avg_counts:
                avg_df = pd.DataFrame([avg_counts]).T.reset_index()
                avg_df.columns = ['Parametre', 'Ortalama DeÄŸer']
                st.dataframe(avg_df)
            else:
                st.info("Ortalama aranma sayÄ±larÄ± hesaplanamadÄ±.")

            st.markdown("**GÃ¼nlÃ¼k En YÃ¼ksek Zirve NoktalarÄ±**")
            overall_daily_peaks_df = analyzer.get_overall_daily_peaks()

            if not overall_daily_peaks_df.empty:
                st.dataframe(overall_daily_peaks_df)
            else:
                st.info("GÃ¼nlÃ¼k genel zirve saatleri bulunamadÄ±. Yeterli veri veya arama hacmi olmayabilir.")

            st.markdown("---")
            st.header("GÃ¶rsel Analizler")

            # Toplam Aranma Hacmi GrafiÄŸi
            search_columns = [col for col in filtered_df.columns if col not in ['Zaman', 'Tarih', 'Saat']]
            if search_columns:
                fig_total = px.line(filtered_df, x='Zaman', y='Toplam Aranma',
                                    title='Toplam Aranma Hacmi (TÃ¼m Liderler)',
                                    labels={'Zaman': 'Tarih ve Saat', 'Toplam Aranma': 'Toplam Aranma Hacmi'},
                                    hover_data={'Zaman': '|%Y-%m-%d %H:%M', 'Toplam Aranma': True})
                
                # Genel ortalama Ã§izgisini ekle
                general_average = analyzer.get_average_search_counts().get('Genel Ortalama', 0)
                fig_total.add_hline(y=general_average, line_dash="dash", line_color="red", annotation_text=f"Ortalama: {general_average:.2f}", 
                                    annotation_position="bottom right", annotation_font_color="red")

                # Mutlak zirve noktasÄ±nÄ± (en tepe nokta) ekle
                if not filtered_df.empty:
                    max_total_value = filtered_df['Toplam Aranma'].max()
                    max_total_time = filtered_df[filtered_df['Toplam Aranma'] == max_total_value]['Zaman'].iloc[0]
                    
                    fig_total.add_annotation(
                        x=max_total_time,
                        y=max_total_value,
                        text=f"Zirve ({int(max_total_value)})",
                        showarrow=True,
                        arrowhead=1,
                        ax=20,
                        ay=-40,
                        bgcolor="rgba(255, 255, 255, 0.8)",
                        bordercolor="purple",
                        borderwidth=1,
                        borderpad=4,
                        font=dict(color="purple", size=10)
                    )

                fig_total.update_layout(hovermode="x unified", xaxis_rangeslider_visible=True) # Zaman kaydÄ±rÄ±cÄ±sÄ±nÄ± etkinleÅŸtir
                st.plotly_chart(fig_total, use_container_width=True)
            else:
                st.info("Toplam aranma hacmi grafiÄŸi oluÅŸturulamadÄ±. Lider arama sÃ¼tunlarÄ± bulunamadÄ±.")

            # Lider BazÄ±nda Aranma Hacmi ve Zirve NoktalarÄ± Grafikleri
            st.subheader("Liderlere GÃ¶re Aranma Hacmi ve Zirve NoktalarÄ±")
            for leader_col in search_columns:
                fig_leader = px.line(filtered_df, x='Zaman', y=leader_col,
                                     title=f'{leader_col} Aranma Hacmi',
                                     labels={'Zaman': 'Tarih ve Saat', leader_col: 'Aranma Hacmi'},
                                     hover_data={'Zaman': '|%Y-%m-%d %H:%M', leader_col: True})

                # Liderin ortalama Ã§izgisini ekle
                leader_average = analyzer.get_average_search_counts().get(f'{leader_col} OrtalamasÄ±', 0)
                fig_leader.add_hline(y=leader_average, line_dash="dash", line_color="blue", annotation_text=f"Ort: {leader_average:.2f}", 
                                     annotation_position="bottom right", annotation_font_color="blue")

                # Mutlak zirve noktasÄ±nÄ± (en tepe nokta) ekle
                if not filtered_df.empty:
                    max_leader_value = filtered_df[leader_col].max()
                    max_leader_time = filtered_df[filtered_df[leader_col] == max_leader_value]['Zaman'].iloc[0]
                    
                    fig_leader.add_annotation(
                        x=max_leader_time,
                        y=max_leader_value,
                        text=f"Zirve ({int(max_leader_value)})",
                        showarrow=True,
                        arrowhead=1,
                        ax=20,
                        ay=-40,
                        bgcolor="rgba(255, 255, 255, 0.8)",
                        bordercolor="red",
                        borderwidth=1,
                        borderpad=4,
                        font=dict(color="red", size=10)
                    )
                fig_leader.update_layout(hovermode="x unified", xaxis_rangeslider_visible=True) # Zaman kaydÄ±rÄ±cÄ±sÄ±nÄ± etkinleÅŸtir
                st.plotly_chart(fig_leader, use_container_width=True) 